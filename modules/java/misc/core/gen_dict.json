{
    "module_imports": [ "java.lang.String" ],
    "class_ignore_list" : [
        "vpClient",
        "vpRequest",
        "vpNetwork",
        "vpServer",
        "vpUDPClient",
		"vpUDPServer",
		"vpSerial",
		"vpIoTools",
		"vpCPUFeatures"
    ],
	"ManualFuncs" : {
    "VpColVector" : {
      "insert" : {
        "j_code" : [""], "cpp_code" : [""], "jn_code" : [""]
      } 
    },
		"VpRotationVector" : {
			"t" : {
        "j_code" : [
              "//",
              "// manual port",
              "// C++:  vpRowVector t()",
              "//\n",
              "//javadoc: VpRotationVector::t()\n",
              "public  VpRowVector t()",
              "{",
              "    VpRowVector rowVector = new VpRowVector();",
              "    t_0(nativeObj, rowVector.nativeObj);",
              "    return rowVector;",
              "}"
        ],
        "jn_code" : [
              "// C++:  vpRowVector t()",
              "private static native void t_0(long nativeObj, long nativeObj2);"
        ],
				"cpp_code" : [
					    "//",
					    "//  vpRowVector t()",
					    "//\n",
					    "JNIEXPORT void JNICALL Java_org_visp_core_VpRotationVector_t_10 (JNIEnv*, jclass, jlong, jlong);\n",
					    "JNIEXPORT void JNICALL Java_org_visp_core_VpRotationVector_t_10",
					    "  (JNIEnv* env, jclass , jlong self, jlong other)",
					    "{",
					    "  static const char method_name[] = \"core::t_10()\";",
					    "  try {",
						  "  LOGD(\"%s\", method_name);",
						  "  vpRotationVector* me = (vpRotationVector*) self; //TODO: check for NULL",
						  "  vpRowVector *row = (vpRowVector*) other;",
						  "  *row = me->t();",
					    "  } catch(const std::exception &e) {",
						  "  throwJavaException(env, &e, method_name);",
					    "  } catch (...) {",
						  "  throwJavaException(env, 0, method_name);",
				      "  }",
					    "  return;",
					    "}" 
				]
			}
		}
	},
    "type_dict" : {
        "vpMatrix": {
            "j_type": "VpMatrix",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpMatrix& %(n)s = *((vpMatrix*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpMatrix"
        },
		"vpCameraParameters": {
            "j_type": "VpCameraParameters",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpCameraParameters& %(n)s = *((vpCameraParameters*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpCameraParameters"
        },
		"vpArray2D": {
            "j_type": "VpArray2D",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpArray2D<double>& %(n)s = *((vpArray2D<double>*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpArray2D"
        },
		"vpImage_char": {
            "j_type": "VpImageUChar",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpImage<unsigned char>& %(n)s = *((vpImage<unsigned char>*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpImageUChar"
        },
		"vpImage_vpRGBa": {
            "j_type": "VpImageRGBa",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpImage<vpRGBa>& %(n)s = *((vpImage<vpRGBa>*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpImageRGBa"
        },
        "Moments": {
            "j_type": "Moments",
            "jn_args": [
                [
                    "double",
                    ".m00"
                ],
                [
                    "double",
                    ".m10"
                ],
                [
                    "double",
                    ".m01"
                ],
                [
                    "double",
                    ".m20"
                ],
                [
                    "double",
                    ".m11"
                ],
                [
                    "double",
                    ".m02"
                ],
                [
                    "double",
                    ".m30"
                ],
                [
                    "double",
                    ".m21"
                ],
                [
                    "double",
                    ".m12"
                ],
                [
                    "double",
                    ".m03"
                ]
            ],
            "jni_type": "jdoubleArray",
            "jni_var": "Moments %(n)s(%(n)s_m00, %(n)s_m10, %(n)s_m01, %(n)s_m20, %(n)s_m11, %(n)s_m02, %(n)s_m30, %(n)s_m21, %(n)s_m12, %(n)s_m03)",
            "suffix": "DDDDDDDDDD"
        },
        "vpPoint": {
            "j_type": "VpPoint",
            "jn_args": [
                [
                    "double",
                    ".x"
                ],
                [
                    "double",
                    ".y"
                ]
            ],
            "jni_type": "jdoubleArray",
            "jni_var": "vpPoint %(n)s((int)%(n)s_x, (int)%(n)s_y)",
            "suffix": "DD",
            "j_import": "org.visp.core.VpPoint"
        },
        "string": {
            "j_type": "String",
            "jn_type": "String",
            "jni_name": "n_%(n)s",
            "jni_type": "jstring",
            "jni_var": "const char* utf_%(n)s = env->GetStringUTFChars(%(n)s, 0); string n_%(n)s( utf_%(n)s ? utf_%(n)s : \"\" ); env->ReleaseStringUTFChars(%(n)s, utf_%(n)s)",
            "suffix": "Ljava_lang_String_2",
            "j_import": "java.lang.String"
        },
        "c_string": {
            "j_type": "String",
            "jn_type": "String",
            "jni_name": "n_%(n)s.c_str()",
            "jni_type": "jstring",
            "jni_var": "const char* utf_%(n)s = env->GetStringUTFChars(%(n)s, 0); string n_%(n)s( utf_%(n)s ? utf_%(n)s : \"\" ); env->ReleaseStringUTFChars(%(n)s, utf_%(n)s)",
            "suffix": "Ljava_lang_String_2",
            "j_import": "java.lang.String"
        },
        "size_t": {
            "j_type": "long",
            "jn_type": "long",
            "jni_type": "jlong",
            "suffix": "J"
        },
        "vector_vpMatrix": {
            "j_type": "List<VpMatrix>",
            "jn_type": "long[]",
            "jni_type": "jlongArray",
            "jni_var": "std::vector<vpMatrix> %(n)s",
            "suffix": "J",
            "v_type": "vpMatrix",
            "j_import": "org.visp.core.VpMatrix"
        },        
		"vpContour": {
            "j_type": "VpContour",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpContour& %(n)s = *((vpContour*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpContour"
        },
        "vpColVector": {
            "j_type": "VpColVector",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpColVector& %(n)s = *((vpColVector*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpColVector"
        },
        "vector_vpColVector": {
            "j_type": "List<VpColVector>",
            "jn_type": "long[]",
            "jni_type": "jlongArray",
            "jni_var": "std::vector<vpColVector> %(n)s",
            "suffix": "J",
            "v_type": "vpColVector",
            "j_import": "org.visp.core.VpColVector"
        }, 
        "vpRowVector": {
            "j_type": "VpRowVector",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpRowVector& %(n)s = *((vpRowVector*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpRowVector"
        },
        "vpHomogeneousMatrix": {
            "j_type": "VpHomogeneousMatrix",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpHomogeneousMatrix& %(n)s = *((vpHomogeneousMatrix*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpHomogeneousMatrix"
        },        
		"vector_vpHomogeneousMatrix": {
            "j_type": "List<VpHomogeneousMatrix>",
            "jn_type": "long[]",
            "jni_type": "jlongArray",
            "jni_var": "std::vector<vpHomogeneousMatrix> %(n)s",
            "suffix": "J",
            "v_type": "vpHomogeneousMatrix",
            "j_import": "org.visp.core.VpHomogeneousMatrix"
        },   
	     "vpRotationVector": {
            "j_type": "VpRotationVector",
            "jn_args": [
                [
                    "__int64",
                    ".nativeObj"
                ]
            ],
            "jn_type": "long",
            "jni_type": "jlong",
            "jni_var": "vpRotationVector& %(n)s = *((vpRotationVector*)%(n)s_nativeObj)",
            "suffix": "J",
            "j_import": "org.visp.core.VpRotationVector"
        }
    }
}
