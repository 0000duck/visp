/**

\page tutorial-install-opensuse Tutorial: Installation from source on Linux openSUSE
\tableofcontents

In this tutorial you will learn how to install ViSP from source on openSUSE. These steps have been tested for openSUSE 13.2 (x86_64) distribution, but should work with any other distribution as well. 

\note Concerning ViSP installation, we provide also other \ref tutorial.

\section install_opensuse_required Install prerequisities

- gcc 4.4.x or later. This can be installed with:
\code
sudo zypper install gcc-c++
\endcode
- CMake 2.6 or higher that could be installed with:
\code
sudo zypper install cmake
\endcode

\section install_opensuse_3rdparty Install 3rd party

ViSP is interfaced with several 3rd party libraries. The <a href="http://visp.inria.fr/software-architecture">complete list is provided here</a>.

\subsection install_opensuse_3rdparty_recommended Recommended 3rd party

We recommend to install the following:

- OpenCV
\code
sudo zypper install opencv-devel
\endcode
- libX11 to be able to open a window to display images
\code
sudo zypper install libX11-devel
\endcode
- lapack to benefit from optimized mathematical capabilities
\code
sudo zypper install lapack-devel
\endcode
- libv4l to grab images from usb or analogic cameras
\code
sudo zypper install libv4l-devel
\endcode
- libxml2 to be able to configure the model-based trackers from xml files
\code
sudo zypper install libxml2-devel
\endcode

\subsection install_opensuse_3rdparty_other Other 3rd party

We give also the way to install other 3rd party libraries to enable specific capabilities.

- libjpeg and libpng to support jpeg and png images
\code
sudo zypper install libjpeg8-devel libpng-devel
\endcode


\section install_opensuse_get_source Getting ViSP source code

There are different ways to get ViSP source code:

- You can download the <a href="http://visp.inria.fr/download">latest release</a> as a zip or a tarball. Once downloaded, uncompress the file using either
\code
tar xvzf visp-x.y.z.tar.gz 
\endcode
or
\code
unzip visp-x.y.z.zip
\endcode

- You can also download a <a href="http://visp.inria.fr/download#snapshot">daily snapshot</a>. Once downloaded, uncompress the file using
\code
tar xvzf visp-snapshot-yyyy-mm-dd.tar.gz
\endcode

- Or you get the cutting-edge ViSP from <a href="https://github.com/lagadic/visp">GitHub repository</a> using the following command
\code
$ git clone https://github.com/lagadic/visp.git
\endcode

We suppose now that ViSP source is in a directory denoted  \<source_dir\>, for example \c $HOME/visp

\section install_opensuse_config Configuring ViSP from source

- Create first a directory denoted \<binary_dir\> where you want to build ViSP. This directory will contain generated Makefiles, object files, and output libraries and binaries.
\code
cd $HOME; mkdir visp-build-release
\endcode

- Enter the \<binary_dir\> and configure the build:
\code
cd $HOME/Vvisp-build-release
cmake ../visp
\endcode
A more versatile way to configure the build is to use \c ccmake, the CMake GUI:
\code
ccmake ../visp
\endcode
The following image shows that this command allows to configure (just by pressing [c] key) the build in a more advanced way where some options could be easily turned On/Off. It allows also to see which are the 3rd parties that will be used. To generate the makefiles, just press [g] key in the ccmake gui.
\image html img-ccmake-opensuse-all.png Snapshot of the ccmake \c ../visp command used to configure ViSP.

\section install_opensuse_build Building ViSP from source

- To build ViSP proceed with:
\code
make -j4
\endcode

- To install ViSP proceed with:
\code
sudo make install
\endcode

- To build ViSP documentation, you have first to install Doxygen package:
\code
sudo zypper install doxygen graphviz
\endcode
Then you can proceed with:
\code
make -j4 visp_doc
\endcode

\section install_opensuse_tips Tips and tricks

- After installation, you can remove installed material using
\code
$ sudo make uninstall
\endcode

- If you want to build only ViSP modules libraries
\code
$ make -j4 visp_modules
\endcode

- If you want to build a given module and all the dependencies
\code
$ make -j4 visp_<module_name>
\endcode
For example to build the model-based tracker module named mbt, run
\code
$ make -j4 visp_mbt
\endcode

- Which are the targets that could be run with make ?
\code
$ make help | grep visp
... visp_tests
... visp_demos
... visp_tutorials
... visp_examples
... visp_modules
... visp_doc
... visp_core
... visp_detection
... visp_robot
... visp_sensor
... visp_vision
... visp_vs
... visp_ar
... visp_mbt
... visp_tt
... visp_tt_mi
\endcode

- Which are the 3rd party libraries that are used in ViSP ?<br>
To see which are the optional 3rd parties that are found during the configuration stage and that will be used by ViSP during the build you can have a look to the text file named ViSP-third-party.txt and located in \<binary_dir\>.

\section install_opensuse_issues Known issues

- Note that with openSUSE 12.04 but also with 13.02, libjpeg-devel package lead to libjpeg62.so installation, that may conflict with libjpeg8.so that is also installed. That's why we recommend to not install libjpeg-devel, but rather install libjpeg8-devel.
\code
Linking CXX executable HelloWorld
/usr/lib64/gcc/x86_64-suse-linux/4.8/../../../../x86_64-suse-linux/bin/ld: warning: libjpeg.so.8, needed by /usr/lib64/libopencv_highgui.so.2.4.9, may conflict with libjpeg.so.62
\endcode 

\section install_opensuse_next Next tutorial

You are now ready to see the next \ref tutorial-getting-started that will show you how to use ViSP as a 3rd party to build your own project.

*/
