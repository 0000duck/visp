/**

\page tutorial-install-ubuntu Tutorial: Installation from source on Linux Ubuntu
\tableofcontents

In this tutorial you will learn how to install ViSP from source on Linux Ubuntu. These steps have been tested for Ubuntu 14.04 (64 bit) distribution, but should work with any other distribution as well. 

\note Concerning ViSP installation, we provide also other \ref tutorial.

\section install_ubuntu_required Install prerequisities

- gcc 4.4.x or later. This can be installed with:
\code
sudo apt-get install build-essential
\endcode
- CMake 2.6 or higher that could be installed with:
\code
sudo apt-get install cmake-curses-gui
\endcode

\section install_ubuntu_3rdparty Install 3rd party

ViSP is interfaced with several optional 3rd party libraries. The <a href="http://visp.inria.fr/software-architecture">complete list is provided here</a>.

\subsection install_ubuntu_3rdparty_recommended Recommended 3rd party

We recommend to install the following:

- OpenCV
\code
sudo apt-get install libopencv-dev
\endcode
- libX11 to be able to open a window to display images
\code
sudo apt-get install libx11-dev
\endcode
- lapack to benefit from optimized mathematical capabilities
\code
sudo apt-get install liblapack-dev
\endcode
- libdc1394 to grab images from firewire cameras
\code
sudo apt-get install libdc1394-22-dev
\endcode
- libv4l to grab images from usb or analogic cameras
\code
sudo apt-get install libv4l-dev
\endcode
- libxml2 to be able to configure the model-based trackers from xml files
\code
sudo apt-get install libxml2-dev
\endcode
- Bar code detection
\code
sudo apt-get install libzbar-dev libdmtx-dev
\endcode

\subsection install_ubuntu_3rdparty_other Other 3rd party

We give also the way to install other 3rd party libraries to enable specific capabilities.

- Coin, to be able to support vrml cad model used by the model-based trackers
\code
sudo apt-get install libcoin80-dev
\endcode
- libjpeg and libpng to support jpeg and png images respectively
\code
sudo apt-get install libjpeg-dev libpng12-dev
\endcode
- ffmpeg, to be able to read or encode compressed video streams
\code
sudo apt-get install libswscale-dev libavutil-dev libavformat-dev libavcodec-dev libbz2-dev libbz2-1.0
\endcode
- Ogre 3D if you want to do augmented reality or simulation
\code
sudo apt-get install libogre-1.9-dev libois-dev
\endcode

\section install_ubuntu_get_source Getting ViSP source code

There are different ways to get ViSP source code:

- You can download the <a href="http://visp.inria.fr/download">latest release</a> as a zip or a tarball. Once downloaded, uncompress the file using either
\code
tar xvzf visp-x.y.z.tar.gz 
\endcode
or
\code
unzip visp-x.y.z.zip
\endcode

- You can also download a <a href="http://visp.inria.fr/download#snapshot">daily snapshot</a>. Once downloaded, uncompress the file using
\code
tar xvzf visp-snapshot-yyyy-mm-dd.tar.gz
\endcode

- Or you get the cutting-edge ViSP from <a href="https://github.com/lagadic/visp">GitHub repository</a> using the following command
\code
$ git clone https://github.com/lagadic/visp.git
\endcode

We suppose now that ViSP source is in a directory denoted  \<source_dir\>, for example \c $HOME/visp

\section install_ubuntu_config Configuring ViSP from source

- Create first a directory denoted \<binary_dir\> where you want to build ViSP. This directory will contain generated Makefiles, object files, and output libraries and binaries.
\code
cd $HOME; mkdir visp-build-release
\endcode

- Enter the \<binary_dir\> and configure the build:
\code
cd $HOME/visp-build-release
cmake ../visp
\endcode
A more versatile way to configure the build is to use \c ccmake, the CMake GUI:
\code
ccmake ../visp
\endcode
The following image shows that this command allows to configure (just by pressing [c] key) the build in a more advanced way where some options could be easily turned On/Off. It allows also to see which are the 3rd parties that will be used. To generate the makefiles, just press [g] key in the ccmake gui.
\image html img-ccmake-ubuntu-all.png Snapshot of the ccmake \c ../visp command used to configure ViSP.

Now we can build ViSP.

\section install_ubuntu_build Building ViSP from source

- To build ViSP proceed with:
\code
make -j4
\endcode

- To install ViSP proceed with:
\code
sudo make install
\endcode

- To build ViSP documentation, you have first to install Doxygen package:
\code
sudo apt-get install doxygen graphviz texlive-latex-base
\endcode
Then you can proceed with:
\code
make -j4 visp_doc
\endcode

\section install_ubuntu_tips Tips and tricks

- After installation, you can remove installed material using
\code
$ sudo make uninstall
\endcode

- If you want to build only ViSP modules libraries
\code
$ make -j4 visp_modules
\endcode

- If you want to build a given module and all the dependencies
\code
$ make -j4 visp_<module_name>
\endcode
For example to build the model-based tracker module named mbt, run
\code
$ make -j4 visp_mbt
\endcode

- Which are the targets that could be run with make ?
\code
$ make help | grep visp
... visp_tests
... visp_demos
... visp_tutorials
... visp_examples
... visp_modules
... visp_doc
... visp_core
... visp_detection
... visp_robot
... visp_sensor
... visp_vision
... visp_vs
... visp_ar
... visp_mbt
... visp_tt
... visp_tt_mi
\endcode

- Which are the 3rd party libraries that are used in ViSP ?<br>
To see which are the optional 3rd parties that are found during the configuration stage and that will be used by ViSP during the build you can have a look to the text file named ViSP-third-party.txt and located in \<binary_dir\>. We provide hereafter an example of a possible content of this file:
\code
                    ViSP third-party libraries

Below you will find the list of third party libraries used to 
build ViSP on your computer.

Mathematics:
  Gnu Scientific Library      : yes
  Lapack/blas                 : yes
Simulator:
  Ogre simulator              : no
  \- Ogre3D                   : no
  \- OIS                      : no
  Coin simulator              : no
  \- Coin3D                   : no
  \- SoWin                    : no
  \- SoXt                     : no
  \- SoQt                     : no
  \- Qt4                      : no
  \- Qt3                      : no
Robots
  Afma6                       : no
  Afma4                       : no
  Biclops                     : no
  Ptu46                       : no
  Pioneer                     : no
  Viper S650                  : no
  Viper S850                  : no
Video devices (display)
  X11                         : no
  GTK                         : no
  OpenCV                      : yes 
  GDI                         : no
  Direct3D                    : no
Framegrabbers
  Firewire libdc1394-2.x      : yes
  Video For Linux Two         : no
  DirectShow                  : no
  CMU 1394 Digital Camera SDK : no
  OpenCV                      : yes 
Specific devices
  Yarp                        : no
  Kinect                      : yes
  \-libfreenect               : yes
  \-libusb-1.0                : yes
  \-pthread                   : yes
Video and image Read/Write:
  FFMPEG                      : no
  libjpeg                     : yes
  libpng                      : yes
Misc:
  XML2                        : yes
  pthread                     : yes
  OpenMP                      : no
  zbar                        : no
  dmtx                        : yes
Documentation:
  Doxygen                     : no
  Graphviz dot                : no
ViSP built with C++11 features: no
\endcode

\section install_ubuntu_next Next tutorial

You are now ready to see the next \ref tutorial-getting-started that will show you how to use ViSP as a 3rd party to build your own project.

*/
