/**

\page tutorial-tracking-mb-generic-apriltag-init Tutorial: Markerless generic model-based tracking using AprilTag for initialization (use case)
\tableofcontents

\section mb_generic_apriltag_intro Introduction

ViSP allows the tracking of a markerless object using the knowledge of its CAD model while providing its 3D localization (based on AprilTag detection in this tutorial) when a calibrated camera is used \cite Comport06b. The model tracked in this exaple is a cube made of cardboard (12.5 cm edges) with an AprilTag sticked on a face (find in <a href="https://april.eecs.umich.edu/media/apriltag/tag36h11.tgz">[this archive]</a> a set of tags you can use). Of course, you will need a webcam to run the tutorial on your computer.

Here is an image of the cube we used in the lab: <br>
\image html img-cube-apriltag.jpg Model used for the tutorial 

This tutorial focuses on vpMbGenericTracker class that was introduced in ViSP 3.1.0 and on vpDetectorAprilTag for initialization of the tracker.

In this tutorial, we will show how to use vpMbGenericTracker class in order to track an object from images acquires by a monocular color camera using moving edges, and how to initialize it using vpDetectorAprilTag class.

Note that the source code used in this tutorial is part of ViSP source code and could be downloaded using the following command:

\code
$ svn export https://github.com/lagadic/visp.git/trunk/tutorial/tracking/model-based/generic-apriltag
\endcode

\subsection mb_generic_apriltag_intro_3rd_parties Considered third-parties

Depending on your use case the following optional third-parties may be used by the tracker. Make sure ViSP was build with the appropriate 3rd parties:
- \c OpenCV: Essential if you want to use the keypoints as visual features that are detected and tracked thanks to the KLT tracker.
- \c libxml: This 3rd party is optional but recommended to read the camera settings from an xml file.

\section mb_generic_apriltag_started Getting started

To start with the generic markerless model-based tracker we recommend to understand the tutorial-mb-generic-tracker.cpp source code that is given and explained below.  

\subsection mb_generic_apriltag_started_src Example source code
The following example that comes from tutorial-mb-generic-tracker-apriltag-init.cpp allows to track a cubic box with an AprilTag on a face using either moving edges or keypoints as visual features.

\include tutorial-mb-generic-tracker-apriltag-init.cpp

\subsection mb_generic_apriltag_started_exe Running the example using a live camera

Once build, to see the options that are available in the previous source code, just run:
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --help
Usage: ./tutorial-mb-generic-tracker-apriltag-init [--input <camera input>] [--tag_size <size in m>] [--quad_decimate <decimation>] [--nthreads <nb>] [--intrinsic <xml intrinsic file>] [--camera_name <camera name>] [--tag_family <0: TAG_36h11, 1: TAG_36h10, 2: TAG_36ARTOOLKIT, 3: TAG_25h9, 4: TAG_25h7, 5: TAG_16h5>] [--display_off] [--cube_size <size in m>] [--texture] [--help]
\endcode

To test the tracker on a 12.5 by 12.5 cm square cure that has an AprilTag of size 8 by 8 cm, to enable moving-edges and keypoints as visual features run:
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --texture
\endcode
To test the tracker on a 12.5 by 12.5 cm square cure that has an AprilTag of size 8 by 8 cm, with only the moving-edges as visual features run:
\code
$ ./tutorial-mb-generic-tracker-apriltag-init
\endcode


By default, the following settings are used: <br>
- Default camera has id=0. To specify another one, run for example:
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --input 1
\endcode
- The default size of the cube is 0.125 meter square. To change to 0.20 meter square, run: 
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --cube_edge_size 0.20
\endcode
- The AprilTag size is 0.08 by 0.08 meters. To change the tag size to let say 0.10 meter square, use: 
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --tag_size 0.10
\endcode
- The AprilTag detection of quads is set to 1.0 by default. You can chage it to 2 to speed up the detection using: 
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --quad_decimate 2
\endcode
- The AprilTag default number of threads used is 1. To increase the number of threads used during detection to 2, run: 
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --nthreads 2
\endcode
- The AprilTag default tag family is 36h11. To set another value, run: 
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --tag_family <family>
\endcode
Note the id corresponding to each family : 0=TAG_36h11, 1=TAG_36h10, 2=TAG_36ARTOOLKIT, 3=TAG_25h9, 4=TAG_25h7, 5=TAG_16h5)
- The default camera parameters used are: px=600, py=600, and principal point is set at image center. To specify your own parameters, you can provide for example a `camera.xml` parameters file with a camera named `myCam in it, by running:
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --intrinsic camera.xml --camera_name myCam
\endcode
- The display is turned on by default, but you can disable it with: 
\code
$ ./tutorial-mb-generic-tracker-apriltag-init --display_off
\endcode


\subsection mb_generic_apriltag_result Expected result of the tutorial
If the tag was sucessfully detected and the tracker correctly initialized, the output of the tutorial would look like this:
\image html img-cube-apriltag-tracking-result.png Cube tracking result

\section mb_generic_apriltag_next Next tutorial

You can followo \ref tutorial-detection-object to learn how to initialize the tracker without user click, by learning the object to track using keypoints when the object is textured.

There is also \ref tutorial-tracking-mb-generic-stereo if you want to know how to extend the tracker to use a stereo camera or \ref tutorial-tracking-mb-generic-rgbd if you want to extend the tracking by using depth as visual features. There is also this other \ref tutorial-tracking-tt.
*/
